// Code generated by MockGen. DO NOT EDIT.
// Source: service/updater.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/nagymarci/stock-screener/model"
	reflect "reflect"
)

// MockgetStockWithFields is a mock of getStockWithFields interface
type MockgetStockWithFields struct {
	ctrl     *gomock.Controller
	recorder *MockgetStockWithFieldsMockRecorder
}

// MockgetStockWithFieldsMockRecorder is the mock recorder for MockgetStockWithFields
type MockgetStockWithFieldsMockRecorder struct {
	mock *MockgetStockWithFields
}

// NewMockgetStockWithFields creates a new mock instance
func NewMockgetStockWithFields(ctrl *gomock.Controller) *MockgetStockWithFields {
	mock := &MockgetStockWithFields{ctrl: ctrl}
	mock.recorder = &MockgetStockWithFieldsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockgetStockWithFields) EXPECT() *MockgetStockWithFieldsMockRecorder {
	return m.recorder
}

// GetWithFields mocks base method
func (m *MockgetStockWithFields) GetWithFields(symbol string, fields []string) (model.StockDataInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithFields", symbol, fields)
	ret0, _ := ret[0].(model.StockDataInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithFields indicates an expected call of GetWithFields
func (mr *MockgetStockWithFieldsMockRecorder) GetWithFields(symbol, fields interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithFields", reflect.TypeOf((*MockgetStockWithFields)(nil).GetWithFields), symbol, fields)
}
